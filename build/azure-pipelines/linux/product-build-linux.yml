steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: Compilation
      path: $(Build.ArtifactStagingDirectory)
    displayName: Download compilation output

  - script: |
      set -e
      tar -xzf $(Build.ArtifactStagingDirectory)/compilation.tar.gz
    displayName: Extract compilation output

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login vscode
      password $(github-distro-mixin-password)
      EOF

      git config user.email "vscode@microsoft.com"
      git config user.name "VSCode"
    displayName: Prepare tooling

  - script: |
      set -e
      git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - script: |
      mkdir -p .build
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN > .build/yarnlockhash
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: "nodeModules | $(Agent.OS) | .build/yarnlockhash"
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Restore node_modules cache

  - script: |
      set -e
      tar -xzf .build/node_modules_cache/cache.tgz
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Extract node_modules cache

  - script: |
      set -e
      npx https://aka.ms/enablesecurefeed standAlone
    timeoutInMinutes: 5
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'), eq(variables['ENABLE_TERRAPIN'], 'true'))
    displayName: Switch to Terrapin packages

  - script: |
      set -e
      export npm_config_arch=$(NPM_ARCH)
      export npm_config_build_from_source=true

      if [ -z "$CC" ] || [ -z "$CXX" ]; then
        export CC=$(which gcc-5)
        export CXX=$(which g++-5)
      fi

      if [ "$VSCODE_ARCH" == "x64" ]; then
        export VSCODE_REMOTE_CC=$(which gcc-4.8)
        export VSCODE_REMOTE_CXX=$(which g++-4.8)
      fi

      for i in {1..3}; do # try 3 times, for Terrapin
        yarn --frozen-lockfile && break
        if [ $i -eq 3 ]; then
          echo "Yarn failed too many times" >&2
          exit 1
        fi
        echo "Yarn failed $i, trying again..."
      done
    env:
      ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    displayName: Install dependencies
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - script: |
      set -e
      node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
      mkdir -p .build/node_modules_cache
      tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Create node_modules archive

  - script: |
      set -e
      node build/azure-pipelines/mixin
    displayName: Mix in quality

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-linux-$(VSCODE_ARCH)-min-ci

      TARBALL_PATH="$(Build.ArtifactStagingDirectory)/code-$VSCODE_QUALITY-$VSCODE_ARCH-$(date +%s).tar.gz"
      (cd .. && tar -czf $TARBALL_PATH VSCode-linux-$VSCODE_ARCH)
      echo "##vso[task.setvariable variable=TARBALL_PATH]$TARBALL_PATH"
    displayName: Build

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-reh-linux-$(VSCODE_ARCH)-min-ci

      SERVER_TARBALL_PATH="$(Build.ArtifactStagingDirectory)/vscode-server-linux-$VSCODE_ARCH.tar.gz"
      (cd .. && mv vscode-reh-linux-$VSCODE_ARCH vscode-server-linux-$VSCODE_ARCH && tar --owner=0 --group=0 -czf $SERVER_TARBALL_PATH vscode-server-linux-$VSCODE_ARCH)
      echo "##vso[task.setvariable variable=SERVER_TARBALL_PATH]$SERVER_TARBALL_PATH"
    displayName: Build Server

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-reh-web-linux-$(VSCODE_ARCH)-min-ci

      WEB_SERVER_TARBALL_PATH="$(Build.ArtifactStagingDirectory)/vscode-server-linux-$VSCODE_ARCH-web.tar.gz"
      (cd .. && mv vscode-reh-web-linux-$VSCODE_ARCH vscode-server-linux-$VSCODE_ARCH-web && tar --owner=0 --group=0 -czf $WEB_SERVER_TARBALL_PATH vscode-server-linux-$VSCODE_ARCH-web)
      echo "##vso[task.setvariable variable=WEB_SERVER_TARBALL_PATH]$WEB_SERVER_TARBALL_PATH"
    displayName: Build Web Server

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-build-deb"

      case $VSCODE_ARCH in
        x64) DEB_ARCH="amd64" ;;
        *) DEB_ARCH="$VSCODE_ARCH" ;;
      esac

      DEB_FILENAME="$(ls $(Build.SourcesDirectory)/.build/linux/deb/$DEB_ARCH/deb/)"
      DEB_PATH="$(Build.SourcesDirectory)/.build/linux/deb/$DEB_ARCH/deb/$DEB_FILENAME"
      echo "##vso[task.setvariable variable=DEB_PATH]$DEB_PATH"
    displayName: Build deb package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-build-rpm"

      case $VSCODE_ARCH in
        x64) RPM_ARCH="x86_64" ;;
        armhf) RPM_ARCH="armv7hl" ;;
        arm64) RPM_ARCH="aarch64" ;;
        *) RPM_ARCH="$VSCODE_ARCH" ;;
      esac

      RPM_FILENAME="$(ls $(Build.SourcesDirectory)/.build/linux/rpm/$RPM_ARCH/ | grep .rpm)"
      RPM_PATH="$(Build.SourcesDirectory)/.build/linux/rpm/$RPM_ARCH/$RPM_FILENAME"
      echo "##vso[task.setvariable variable=RPM_PATH]$RPM_PATH"
    displayName: Build rpm package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-prepare-snap"

      mkdir -p $(Build.SourcesDirectory)/.build/linux/snap-tarball
      SNAP_TARBALL_PATH="$(Build.SourcesDirectory)/.build/linux/snap-tarball/snap-$VSCODE_ARCH.tar.gz"
      (cd .build/linux && tar -czf $SNAP_TARBALL_PATH snap)
    displayName: Prepare snap package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # needed for code signing
  - task: UseDotNet@2
    displayName: "Install .NET Core SDK 2.x"
    inputs:
      version: 2.x
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: "ESRP CodeSign"
      FolderPath: ".build/linux/rpm"
      Pattern: "*.rpm"
      signConfigType: inlineSignParams
      inlineOperation: |
        [
          {
            "keyCode": "CP-450779-Pgp",
            "operationSetCode": "LinuxSign",
            "parameters": [ ],
            "toolName": "sign",
            "toolVersion": "1.0"
          }
        ]
      SessionTimeout: 120
    displayName: Codesign rpm
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(DEB_PATH)
    artifact: vscode_client_linux_$(VSCODE_ARCH)_deb-package
    displayName: Publish deb package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(RPM_PATH)
    artifact: vscode_client_linux_$(VSCODE_ARCH)_rpm-package
    displayName: Publish rpm package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(TARBALL_PATH)
    artifact: vscode_client_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish client archive

  - publish: $(SERVER_TARBALL_PATH)
    artifact: vscode_server_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish server archive

  - publish: $(WEB_SERVER_TARBALL_PATH)
    artifact: vscode_web_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish web server archive

  - task: PublishPipelineArtifact@0
    displayName: "Publish Pipeline Artifact"
    inputs:
      artifactName: "snap-$(VSCODE_ARCH)"
      targetPath: .build/linux/snap-tarball
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))
