steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: Compilation
      path: $(Build.ArtifactStagingDirectory)
    displayName: Download compilation output

  - script: |
      set -e
      tar -xzf $(Build.ArtifactStagingDirectory)/compilation.tar.gz
    displayName: Extract compilation output

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login vscode
      password $(github-distro-mixin-password)
      EOF

      git config user.email "vscode@microsoft.com"
      git config user.name "VSCode"
    displayName: Prepare tooling

  - script: |
      set -e
      git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - script: |
      mkdir -p .build
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN > .build/yarnlockhash
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: "nodeModules | $(Agent.OS) | .build/yarnlockhash"
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Restore node_modules cache

  - script: |
      set -e
      tar -xzf .build/node_modules_cache/cache.tgz
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Extract node_modules cache

  - script: |
      set -e
      echo "Node modules should've been restored"
      exit 1
    displayName: Check node_modules cache
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - download: current
    artifact: vscode_client_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Download client archive

  - download: current
    artifact: vscode_server_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Download server archive

  - download: current
    artifact: vscode_web_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Download web server archive

  - script: |
      set -e
      tar -xzf $(Pipeline.Workspace)/vscode_client_linux_$(VSCODE_ARCH)_archive-unsigned/*.tar.gz
      tar -xzf $(Pipeline.Workspace)/vscode_server_linux_$(VSCODE_ARCH)_archive-unsigned/*.tar.gz
      tar -xzf $(Pipeline.Workspace)/vscode_web_linux_$(VSCODE_ARCH)_archive-unsigned/*.tar.gz
    displayName: Extract archives

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn npm-run-all -lp "electron $(VSCODE_ARCH)" "playwright-install"
    displayName: Download Electron and Playwright
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      ./scripts/test.sh --build --tfs "Unit Tests"
    displayName: Run unit tests (Electron)
    timeoutInMinutes: 7
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      yarn test-browser --build --browser chromium --tfs "Browser Unit Tests"
    displayName: Run unit tests (Browser)
    timeoutInMinutes: 7
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      # Figure out the full absolute path of the product we just built
      # including the remote server and configure the integration tests
      # to run with these builds instead of running out of sources.
      set -e
      APP_ROOT=$(Pipeline.Workspace)/VSCode-linux-$(VSCODE_ARCH)
      APP_NAME=$(node -p "require(\"$APP_ROOT/resources/app/product.json\").applicationName")
      INTEGRATION_TEST_APP_NAME="$APP_NAME" \
      INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME" \
      VSCODE_REMOTE_SERVER_PATH="$(Pipeline.Workspace)/vscode-reh-linux-$(VSCODE_ARCH)" \
      ./scripts/test-integration.sh --build --tfs "Integration Tests"
    displayName: Run integration tests (Electron)
    timeoutInMinutes: 10
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      VSCODE_REMOTE_SERVER_PATH="$(Pipeline.Workspace)/vscode-reh-web-linux-$(VSCODE_ARCH)" \
      ./resources/server/test/test-web-integration.sh --browser chromium
    displayName: Run integration tests (Browser)
    timeoutInMinutes: 10
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      APP_ROOT=$(Pipeline.Workspace)/VSCode-linux-$(VSCODE_ARCH)
      APP_NAME=$(node -p "require(\"$APP_ROOT/resources/app/product.json\").applicationName")
      INTEGRATION_TEST_APP_NAME="$APP_NAME" \
      INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME" \
      VSCODE_REMOTE_SERVER_PATH="$(Pipeline.Workspace)/vscode-reh-linux-$(VSCODE_ARCH)" \
      ./resources/server/test/test-remote-integration.sh
    displayName: Run remote integration tests (Electron)
    timeoutInMinutes: 7
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      APP_PATH=$(Pipeline.Workspace)/VSCode-linux-$(VSCODE_ARCH)
      yarn smoketest-no-compile --build "$APP_PATH" --electronArgs="--disable-setuid-sandbox --disable-dev-shm-usage --use-gl=swiftshader"
    timeoutInMinutes: 5
    displayName: Run smoke tests (Electron)
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      APP_PATH=$(Pipeline.Workspace)/VSCode-linux-$(VSCODE_ARCH)
      VSCODE_REMOTE_SERVER_PATH="$(Pipeline.Workspace)/vscode-reh-linux-$(VSCODE_ARCH)" \
      yarn smoketest-no-compile --build "$APP_PATH" --remote --electronArgs="--disable-setuid-sandbox --disable-dev-shm-usage --use-gl=swiftshader"
    timeoutInMinutes: 5
    displayName: Run smoke tests (Remote)
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      VSCODE_REMOTE_SERVER_PATH="$(Pipeline.Workspace)/vscode-reh-web-linux-$(VSCODE_ARCH)" \
      yarn smoketest-no-compile --web --headless --electronArgs="--disable-setuid-sandbox --disable-dev-shm-usage --use-gl=swiftshader"
    timeoutInMinutes: 5
    displayName: Run smoke tests (Browser)
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: "crash-dump-linux-$(VSCODE_ARCH)"
      targetPath: .build/crashes
    displayName: "Publish Crash Reports"
    continueOnError: true
    condition: failed()

  - task: PublishTestResults@2
    displayName: Publish Tests Results
    inputs:
      testResultsFiles: "*-results.xml"
      searchFolder: "$(Build.ArtifactStagingDirectory)/test-results"
    condition: and(succeededOrFailed(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))
